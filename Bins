


import dpkt
import socket
import math
import statistics

def connection_id_to_str(cid, v=4):
    """This converts the connection ID cid which is a tuple of (source_ip_address, source_tcp_port, destination_ip_address,
    destination_tcp_port) to a string. v is either 4 for IPv4 or 6 for IPv6"""
    if v == 4:
        src_ip_addr_str = socket.inet_ntoa(cid[0])
        dst_ip_addr_str = socket.inet_ntoa(cid[2])
        return src_ip_addr_str + ":" + str(cid[1]) + "<=>" + dst_ip_addr_str + ":" + str(cid[3])
    elif v == 6:
        src_ip_addr_str = socket.inet_ntop(socket.AF_INET6, cid[0])
        dst_ip_addr_str = socket.inet_ntop(socket.AF_INET6, cid[2])
        return src_ip_addr_str + "." + str(cid[1]) + "<=>" + dst_ip_addr_str + "." + str(cid[3])
    else:
        raise ValueError('Argument to connection_id_to_str must be 4 or 6, is %d' % v)
 
# def calculate_active_idle_times(flow_buckets, window_size=2):
#     active_idle_times = []

#     for flow, packets in flow_buckets.items():
#         active_start_time = None
#         idle_start_time = None
#         active_end_time = None

#         for packet in packets:
#             timestamp, direction, data_length, fin_flag = packet

#             if fin_flag == 1:  # FIN flag encountered
#                 if active_start_time is not None:
#                     active_end_time = timestamp
#                     active_duration = active_end_time - active_start_time
#                     active_idle_times.append(('active', flow, active_start_time, active_end_time, active_duration))
#                     active_start_time = None

#             if active_start_time is None:  # Not in an active state
#                 if fin_flag == 0:  # Not a FIN packet
#                     if idle_start_time is None:
#                         idle_start_time = timestamp
#             elif idle_start_time is not None:  # In an idle state
#                 if fin_flag == 0:  # Not a FIN packet
#                     idle_end_time = timestamp
#                     idle_duration = idle_end_time - idle_start_time
#                     active_idle_times.append(('idle', flow, idle_start_time, idle_end_time, idle_duration))
#                     idle_start_time = None

#         # Handle the case where the last packet is active until the end of the window
#         if active_start_time is not None and active_end_time is None:
#             active_end_time = timestamp
#             active_duration = active_end_time - active_start_time
#             active_idle_times.append(('active', flow, active_start_time, active_end_time, active_duration))

#     return active_idle_times

def analyze_pcap_file(file_path):
    with open(file_path, 'rb') as f:
        pcap = dpkt.pcap.Reader(f)
        idx = 0
        flow_buckets = {}
        for ts, buf in pcap:
            if idx == 0:
                first_ts = ts
                idx = 1
            timestamp = ts - first_ts
            eth = dpkt.ethernet.Ethernet(buf)
            if eth.type != dpkt.ethernet.ETH_TYPE_IP:
                continue

            ip = eth.data
            if ip.p != dpkt.ip.IP_PROTO_TCP:
                continue
            
            total_duration=ts-first_ts
            tcp = ip.data
            connection_id = (ip.src, tcp.sport, ip.dst, tcp.dport)
            reverse_connection_id = (ip.dst, tcp.dport, ip.src, tcp.sport)

            flow = connection_id_to_str(connection_id)
            reverse_flow = connection_id_to_str(reverse_connection_id)
            
            if flow in flow_buckets:
                flow_buckets[flow].append([timestamp, 1, len(tcp.data), 1 if tcp.flags & dpkt.tcp.TH_FIN else 0])
            elif reverse_flow in flow_buckets:
                flow_buckets[reverse_flow].append([timestamp, -1, len(tcp.data), 1 if tcp.flags & dpkt.tcp.TH_FIN else 0])
            else:
                flow_buckets[flow] = [[timestamp, 1, len(tcp.data), 1 if tcp.flags & dpkt.tcp.TH_FIN else 0]]# Packet processing code

        No_of_windows = math.ceil(total_duration / window_size)

        window_buckets = [{} for _ in range(No_of_windows)]
        bins = [{} for _ in range(No_of_windows)]


        for flow, packets in flow_buckets.items():
            for packet in packets:
                timestamp, direction, data_length, fin_flag = packet
                window_index = math.floor(timestamp / window_size)
                bin_index = math.floor(timestamp * 100)


                if window_index >= window_size:
                    continue
                if flow not in bins[window_index]:
                    bins[window_index][flow] = {}

                if bin_index not in bins[window_index][flow]:
                    bins[window_index][flow][bin_index] = 0

                bins[window_index][flow][bin_index] += data_length
                
                
#                 bin_index = math.floor(timestamp * 100): This line calculates the bin index for the current packet based on its timestamp. Since the timestamps are in seconds, multiplying by 100 allows us to convert the timestamp into centiseconds, effectively creating bins of size 0.01 seconds. The math.floor() function is used to round down the calculated value to the nearest integer.

# if bin_index not in bins[idx][flow]:: This line checks if the bin_index is already present in the bins dictionary for the current window and flow. If the bin index is not present, it means that this is the first packet falling into this bin for the given flow, so we initialize the bin value to 0.
# 
# bins[idx][flow][bin_index] += data_length: This line increments the data size within the corresponding bin for the current flow and window. It adds the data_length of the packet to the existing value in the bins dictionary at the specified window, flow, and bin index
                
                

                if flow not in window_buckets[window_index]:
                    window_buckets[window_index][flow] = {
                        'total_forward_packets': 0,
                        'total_backward_packets': 0,'total_bytes_per_sec': 0,
                        'forward_bytes': 0,
                        'backward_bytes': 0,
                        'forward_inter_arrival_time':[],
                        'backward_inter_arrival_time':[],
                        'flow_inter_arrival_time':[], 'forward_mean': 0,
                        'forward_min': 0, 'forward_max': 0,
                        'forward_std': 0, 'backward_mean': 0,                 
                        'backward_min': 0,'backward_max': 0,
                        'backward_std': 0,'flow_mean': 0,'flow_min': 0, 'flow_max': 0, 'flow_std': 0
                    }

                flow_data = window_buckets[window_index][flow]
                
                if direction == 1:
                    flow_data['total_forward_packets'] += 1
                    flow_data['forward_bytes'] += data_length
                    flow_data['forward_inter_arrival_time'].append(timestamp)
                elif direction == -1:
                    flow_data['total_backward_packets'] += 1
                    flow_data['backward_bytes'] += data_length
                    flow_data['backward_inter_arrival_time'].append(timestamp)
#                 total_bytes_per_sec = (forward_bytes + backward_bytes) / window_size
                flow_data['total_bytes_per_sec'] = (flow_data['forward_bytes']+flow_data['backward_bytes'])/window_size

                flow_data['flow_inter_arrival_time'].append(timestamp)
        for idx, window in enumerate(window_buckets):
            total_packets = sum(flow_data['total_forward_packets'] + flow_data['total_backward_packets']
                                for flow_data in window.values())

            if total_packets <20:
                continue
        for idx, window in enumerate(window_buckets[:window_size]):
                       
            for flow, flow_data in window.items():
                
                forward_mean = statistics.mean(flow_data['forward_inter_arrival_time'])
                forward_min = min(flow_data['forward_inter_arrival_time'])
                forward_max = max(flow_data['forward_inter_arrival_time'])
                forward_std = statistics.stdev(flow_data['forward_inter_arrival_time'])

                backward_mean = statistics.mean(flow_data['backward_inter_arrival_time'])
                backward_min = min(flow_data['backward_inter_arrival_time'])
                backward_max = max(flow_data['backward_inter_arrival_time'])
                backward_std = statistics.stdev(flow_data['backward_inter_arrival_time'])

                flow_mean = statistics.mean(flow_data['flow_inter_arrival_time'])
                flow_min = min(flow_data['flow_inter_arrival_time'])
                flow_max = max(flow_data['flow_inter_arrival_time'])
                flow_std = statistics.stdev(flow_data['flow_inter_arrival_time'])

                # Store the calculated statistics in windows with each flow
                flow_data['forward_mean'] = forward_mean
                flow_data['forward_min'] = forward_min
                flow_data['forward_max'] = forward_max
                flow_data['forward_std'] = forward_std

                flow_data['backward_mean'] = backward_mean
                flow_data['backward_min'] = backward_min
                flow_data['backward_max'] = backward_max
                flow_data['backward_std'] = backward_std

                flow_data['flow_mean'] = flow_mean
                flow_data['flow_min'] = flow_min
                flow_data['flow_max'] = flow_max
                flow_data['flow_std'] = flow_std
  
    print("Flow Buckets:")
    print(flow_buckets)
    print('------------x---------------')
    print("Total Duration:", total_duration)
    print("Number of Windows:", No_of_windows)
    for idx, window in enumerate(window_buckets[:window_size]):
            print("Window", idx)
            for key,value in window.items():
                print( key)
                print(value)
    print("Bins:")
    for idx, window in enumerate(bins):
        print("Window", idx)
        for flow, flow_bins in window.items():
            print(flow)
            print(flow_bins)             

window_size = 2
analyze_pcap_file('E:\PPT Reader\http_ipv4_complex.cap')
