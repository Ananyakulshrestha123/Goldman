import dpkt
import socket
import math
import statistics

def connection_id_to_str(cid, v=4):
    # Connection ID to string conversion code

def analyze_pcap_file(file_path):
    with open(file_path, 'rb') as f:
        pcap = dpkt.pcap.Reader(f)
        idx = 0
        flow_buckets = {}
        total_duration = 0  # Initialize total_duration
        for ts, buf in pcap:
            if idx == 0:
                first_ts = ts
                idx = 1
            timestamp = ts - first_ts
            eth = dpkt.ethernet.Ethernet(buf)
            if eth.type != dpkt.ethernet.ETH_TYPE_IP:
                continue

            ip = eth.data
            if ip.p != dpkt.ip.IP_PROTO_TCP:
                continue

            total_duration = ts - first_ts  # Update total_duration with latest timestamp

            # Rest of the packet processing code...

        No_of_windows = math.ceil(total_duration / window_size)

        window_buckets = [{} for _ in range(No_of_windows)]
        bins = [{} for _ in range(No_of_windows)]

        # Rest of the code...

        for flow, packets in flow_buckets.items():
            for packet in packets:
                timestamp, direction, data_length, fin_flag = packet
                window_index = math.floor(timestamp / window_size)
                bin_index = math.floor(timestamp * 100)

                if window_index >= window_size:
                    continue
                if flow not in bins[window_index]:
                    bins[window_index][flow] = {}

                if bin_index not in bins[window_index][flow]:
                    bins[window_index][flow][bin_index] = 0

                bins[window_index][flow][bin_index] += data_length

                if flow not in window_buckets[window_index]:
                    window_buckets[window_index][flow] = {
                        'total_forward_packets': 0,
                        'total_backward_packets': 0,
                        'forward_bytes': 0,
                        'backward_bytes': 0,
                        'forward_time': [],
                        'backward_time': [],
                        'forward_interarrival_time': [],
                        'backward_interarrival_time': [],
                        'total_bytes_per_sec': 0
                    }

                flow_data = window_buckets[window_index][flow]

                if direction == 1:
                    flow_data['total_forward_packets'] += 1
                    flow_data['forward_bytes'] += data_length
                    flow_data['forward_time'].append(timestamp)
                elif direction == -1:
                    flow_data['total_backward_packets'] += 1
                    flow_data['backward_bytes'] += data_length
                    flow_data['backward_time'].append(timestamp)

        for window in window_buckets:
            for flow_data in window.values():
                forward_time = flow_data['forward_time']
                backward_time = flow_data['backward_time']

                # Calculate forward interarrival time
                forward_interarrival_time = [
                    forward_time[i] - forward_time[i - 1]
                    for i in range(1, len(forward_time))
                ]
                flow_data['forward_interarrival_time'] = forward_interarrival_time

                # Calculate backward interarrival time
                backward_interarrival_time = [
                    backward_time[i] - backward_time[i - 1]
                    for i in range(1, len(backward_time))
                ]
                flow_data['backward_interarrival_time'] = backward_interarrival_time

        forward_bins = [{k: v for k, v in flow_bins.items() if v > 0 and k < int(window_size * 100)} for flow_bins in bins]
        backward_bins = [{k: v for k, v in flow_bins.items() if v > 0 and k >= int(window_size * 100)} for flow_bins in bins]

        # Divide the bins of 0.01 seconds into forward and backward lists
        forward_bin_size = int(window_size * 100)
        backward_bin_size = int(window_size * 100) - 1

        forward_bins_list = [[] for _ in range(No_of_windows)]
        backward_bins_list = [[] for _ in range(No_of_windows)]

        for idx, window in enumerate(forward_bins):
            for flow, flow_bins in window.items():
                for bin_index, value in flow_bins.items():
                    bin_start = bin_index / 100
                    bin_end = bin_start + 0.01
                    forward_bins_list[idx].extend([bin_start, bin_end] * int(value / forward_bin_size))

        for idx, window in enumerate(backward_bins):
            for flow, flow_bins in window.items():
                for bin_index, value in flow_bins.items():
                    bin_start = bin_index / 100
                    bin_end = bin_start + 0.01
                    backward_bins_list[idx].extend([bin_start, bin_end] * int(value / backward_bin_size))

        print("Forward Bins:")
        for idx, window in enumerate(forward_bins_list):
            print("Window", idx)
            print(window)

        print("Backward Bins:")
        for idx, window in enumerate(backward_bins_list):
            print("Window", idx)
            print(window)

window_size = 2
analyze_pcap_file('E:\PPT Reader\http_ipv4_complex.cap')
